import { User, Grade, Subject } from '../config/associations.js';

class StudentController {
  // Obtener informaci√≥n acad√©mica del estudiante autenticado
  static async getMyAcademicInfo(req, res) {
    try {
      const studentId = req.user.id;
      console.log('üîç Buscando informaci√≥n acad√©mica para estudiante:', studentId);

      // Primero obtener el estudiante b√°sico
      const student = await User.findOne({
        where: { id: studentId, role: 'estudiante', activo: true },
        attributes: ['id', 'nombre', 'apellido', 'email']
      });

      if (!student) {
        return res.status(404).json({
          success: false,
          message: 'Estudiante no encontrado'
        });
      }

      // Obtener los grados en los que est√° inscrito
      const enrolledGrades = await Grade.findAll({
        include: [
          {
            model: User,
            as: 'students',
            where: { id: studentId },
            attributes: []
          }
        ],
        attributes: ['id', 'nombre', 'descripcion']
      });

      console.log('üìö Grados encontrados:', enrolledGrades.length);

      // Formatear la respuesta para mostrar informaci√≥n clara
      const academicInfo = {
        estudiante: {
          id: student.id,
          nombre: student.nombre,
          apellido: student.apellido,
          email: student.email
        },
        grados: enrolledGrades.map(grade => ({
          id: grade.id,
          nombre: grade.nombre,
          descripcion: grade.descripcion
        }))
      };

      res.status(200).json({
        success: true,
        data: academicInfo
      });
    } catch (error) {
      console.error('‚ùå Error en getMyAcademicInfo:', error);
      res.status(500).json({
        success: false,
        message: 'Error al obtener informaci√≥n acad√©mica',
        error: error.message
      });
    }
  }

  // Obtener horario del estudiante (materias por d√≠a)
  static async getMySchedule(req, res) {
    try {
      const studentId = req.user.id;
      console.log('üìÖ Buscando horario para estudiante:', studentId);

      // Por ahora, devolver un horario b√°sico
      const schedule = {
        estudiante: {
          id: studentId
        },
        horario: [
          {
            dia: 'Lunes',
            materias: [
              { hora: '8:00 - 9:00', materia: 'Matem√°ticas', profesor: 'Juan P√©rez' },
              { hora: '9:00 - 10:00', materia: 'Ciencias', profesor: 'Juan P√©rez' },
              { hora: '10:00 - 11:00', materia: 'Historia', profesor: 'Mar√≠a Garc√≠a' }
            ]
          },
          {
            dia: 'Martes',
            materias: [
              { hora: '8:00 - 9:00', materia: 'Espa√±ol', profesor: 'Ana L√≥pez' },
              { hora: '9:00 - 10:00', materia: 'Ingl√©s', profesor: 'Carlos Ruiz' },
              { hora: '10:00 - 11:00', materia: 'Educaci√≥n F√≠sica', profesor: 'Pedro S√°nchez' }
            ]
          }
        ]
      };

      res.status(200).json({
        success: true,
        data: schedule
      });
    } catch (error) {
      console.error('‚ùå Error en getMySchedule:', error);
      res.status(500).json({
        success: false,
        message: 'Error al obtener horario',
        error: error.message
      });
    }
  }
}

export default StudentController;
